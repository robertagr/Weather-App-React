{"ast":null,"code":"import { useCallback, useEffect, useMemo, useRef, useState, useSyncExternalStore } from 'react';\n// in memory fallback used then `localStorage` throws an error\nexport const inMemoryData = new Map();\nexport default function useLocalStorageState(key, options) {\n  // istanbul ignore next\n  if (useSyncExternalStore === undefined) {\n    throw new TypeError(`You are using React 17 or below. Install with \"npm install use-local-storage-state@17\".`);\n  }\n  const [defaultValue] = useState(options === null || options === void 0 ? void 0 : options.defaultValue);\n  // SSR support\n  // - on the server, return a constant value\n  // - this makes the implementation simpler and smaller because the `localStorage` object is\n  //   `undefined` on the server\n  if (typeof window === 'undefined') {\n    return [defaultValue, () => {}, {\n      isPersistent: true,\n      removeItem: () => {}\n    }];\n  }\n  const serializer = options === null || options === void 0 ? void 0 : options.serializer;\n  // disabling ESLint because the above if statement can be executed only on the server. the value\n  // of `window` can't change between calls.\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  return useBrowserLocalStorageState(key, defaultValue, options === null || options === void 0 ? void 0 : options.storageSync, serializer === null || serializer === void 0 ? void 0 : serializer.parse, serializer === null || serializer === void 0 ? void 0 : serializer.stringify);\n}\nfunction useBrowserLocalStorageState(key, defaultValue) {\n  let storageSync = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  let parse = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : parseJSON;\n  let stringify = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : JSON.stringify;\n  // store default value in localStorage:\n  // - initial issue: https://github.com/astoilkov/use-local-storage-state/issues/26\n  //   issues that were caused by incorrect initial and secondary implementations:\n  //   - https://github.com/astoilkov/use-local-storage-state/issues/30\n  //   - https://github.com/astoilkov/use-local-storage-state/issues/33\n  if (!inMemoryData.has(key) && defaultValue !== undefined && goodTry(() => localStorage.getItem(key)) === null) {\n    // reasons for `localStorage` to throw an error:\n    // - maximum quota is exceeded\n    // - under Mobile Safari (since iOS 5) when the user enters private mode\n    //   `localStorage.setItem()` will throw\n    // - trying to access localStorage object when cookies are disabled in Safari throws\n    //   \"SecurityError: The operation is insecure.\"\n    goodTry(() => localStorage.setItem(key, stringify(defaultValue)));\n  }\n  // we keep the `parsed` value in a ref because `useSyncExternalStore` requires a cached version\n  const storageValue = useRef({\n    item: null,\n    parsed: defaultValue\n  });\n  const value = useSyncExternalStore(useCallback(onStoreChange => {\n    const onChange = localKey => {\n      if (key === localKey) {\n        onStoreChange();\n      }\n    };\n    callbacks.add(onChange);\n    return () => {\n      callbacks.delete(onChange);\n    };\n  }, [key]),\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  () => {\n    var _a;\n    const item = (_a = goodTry(() => localStorage.getItem(key))) !== null && _a !== void 0 ? _a : null;\n    if (inMemoryData.has(key)) {\n      storageValue.current = {\n        item,\n        parsed: inMemoryData.get(key)\n      };\n    } else if (item !== storageValue.current.item) {\n      let parsed;\n      try {\n        parsed = item === null ? defaultValue : parse(item);\n      } catch (_b) {\n        parsed = defaultValue;\n      }\n      storageValue.current = {\n        item,\n        parsed\n      };\n    }\n    return storageValue.current.parsed;\n  },\n  // istanbul ignore next\n  () => defaultValue);\n  const setState = useCallback(newValue => {\n    const value = newValue instanceof Function ? newValue(storageValue.current.parsed) : newValue;\n    // reasons for `localStorage` to throw an error:\n    // - maximum quota is exceeded\n    // - under Mobile Safari (since iOS 5) when the user enters private mode\n    //   `localStorage.setItem()` will throw\n    // - trying to access `localStorage` object when cookies are disabled in Safari throws\n    //   \"SecurityError: The operation is insecure.\"\n    try {\n      localStorage.setItem(key, stringify(value));\n      inMemoryData.delete(key);\n    } catch (_a) {\n      inMemoryData.set(key, value);\n    }\n    triggerCallbacks(key);\n  }, [key, stringify]);\n  // - syncs change across tabs, windows, iframes\n  // - the `storage` event is called only in all tabs, windows, iframe's except the one that\n  //   triggered the change\n  useEffect(() => {\n    if (!storageSync) {\n      return undefined;\n    }\n    const onStorage = e => {\n      if (e.storageArea === goodTry(() => localStorage) && e.key === key) {\n        triggerCallbacks(key);\n      }\n    };\n    window.addEventListener('storage', onStorage);\n    return () => window.removeEventListener('storage', onStorage);\n  }, [key, storageSync]);\n  return useMemo(() => [value, setState, {\n    isPersistent: value === defaultValue || !inMemoryData.has(key),\n    removeItem() {\n      goodTry(() => localStorage.removeItem(key));\n      inMemoryData.delete(key);\n      triggerCallbacks(key);\n    }\n  }], [key, setState, value, defaultValue]);\n}\n// notifies all instances using the same `key` to update\nconst callbacks = new Set();\nfunction triggerCallbacks(key) {\n  for (const callback of [...callbacks]) {\n    callback(key);\n  }\n}\n// a wrapper for `JSON.parse()` that supports \"undefined\" value. otherwise,\n// `JSON.parse(JSON.stringify(undefined))` returns the string \"undefined\" not the value `undefined`\nfunction parseJSON(value) {\n  return value === 'undefined' ? undefined : JSON.parse(value);\n}\nfunction goodTry(tryFn) {\n  try {\n    return tryFn();\n  } catch (_a) {\n    return undefined;\n  }\n}","map":{"version":3,"names":["useCallback","useEffect","useMemo","useRef","useState","useSyncExternalStore","inMemoryData","Map","useLocalStorageState","key","options","undefined","TypeError","defaultValue","window","isPersistent","removeItem","serializer","useBrowserLocalStorageState","storageSync","parse","stringify","arguments","length","parseJSON","JSON","has","goodTry","localStorage","getItem","setItem","storageValue","item","parsed","value","onStoreChange","onChange","localKey","callbacks","add","delete","_a","current","get","_b","setState","newValue","Function","set","triggerCallbacks","onStorage","e","storageArea","addEventListener","removeEventListener","Set","callback","tryFn"],"sources":["/Users/roberta/Desktop/spiced-bootcamp/Weather-App/node_modules/use-local-storage-state/es/src/useLocalStorageState.js"],"sourcesContent":["import { useCallback, useEffect, useMemo, useRef, useState, useSyncExternalStore } from 'react';\n// in memory fallback used then `localStorage` throws an error\nexport const inMemoryData = new Map();\nexport default function useLocalStorageState(key, options) {\n    // istanbul ignore next\n    if (useSyncExternalStore === undefined) {\n        throw new TypeError(`You are using React 17 or below. Install with \"npm install use-local-storage-state@17\".`);\n    }\n    const [defaultValue] = useState(options === null || options === void 0 ? void 0 : options.defaultValue);\n    // SSR support\n    // - on the server, return a constant value\n    // - this makes the implementation simpler and smaller because the `localStorage` object is\n    //   `undefined` on the server\n    if (typeof window === 'undefined') {\n        return [\n            defaultValue,\n            () => { },\n            {\n                isPersistent: true,\n                removeItem: () => { },\n            },\n        ];\n    }\n    const serializer = options === null || options === void 0 ? void 0 : options.serializer;\n    // disabling ESLint because the above if statement can be executed only on the server. the value\n    // of `window` can't change between calls.\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    return useBrowserLocalStorageState(key, defaultValue, options === null || options === void 0 ? void 0 : options.storageSync, serializer === null || serializer === void 0 ? void 0 : serializer.parse, serializer === null || serializer === void 0 ? void 0 : serializer.stringify);\n}\nfunction useBrowserLocalStorageState(key, defaultValue, storageSync = true, parse = parseJSON, stringify = JSON.stringify) {\n    // store default value in localStorage:\n    // - initial issue: https://github.com/astoilkov/use-local-storage-state/issues/26\n    //   issues that were caused by incorrect initial and secondary implementations:\n    //   - https://github.com/astoilkov/use-local-storage-state/issues/30\n    //   - https://github.com/astoilkov/use-local-storage-state/issues/33\n    if (!inMemoryData.has(key) &&\n        defaultValue !== undefined &&\n        goodTry(() => localStorage.getItem(key)) === null) {\n        // reasons for `localStorage` to throw an error:\n        // - maximum quota is exceeded\n        // - under Mobile Safari (since iOS 5) when the user enters private mode\n        //   `localStorage.setItem()` will throw\n        // - trying to access localStorage object when cookies are disabled in Safari throws\n        //   \"SecurityError: The operation is insecure.\"\n        goodTry(() => localStorage.setItem(key, stringify(defaultValue)));\n    }\n    // we keep the `parsed` value in a ref because `useSyncExternalStore` requires a cached version\n    const storageValue = useRef({\n        item: null,\n        parsed: defaultValue,\n    });\n    const value = useSyncExternalStore(useCallback((onStoreChange) => {\n        const onChange = (localKey) => {\n            if (key === localKey) {\n                onStoreChange();\n            }\n        };\n        callbacks.add(onChange);\n        return () => {\n            callbacks.delete(onChange);\n        };\n    }, [key]), \n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    () => {\n        var _a;\n        const item = (_a = goodTry(() => localStorage.getItem(key))) !== null && _a !== void 0 ? _a : null;\n        if (inMemoryData.has(key)) {\n            storageValue.current = {\n                item,\n                parsed: inMemoryData.get(key),\n            };\n        }\n        else if (item !== storageValue.current.item) {\n            let parsed;\n            try {\n                parsed = item === null ? defaultValue : parse(item);\n            }\n            catch (_b) {\n                parsed = defaultValue;\n            }\n            storageValue.current = {\n                item,\n                parsed,\n            };\n        }\n        return storageValue.current.parsed;\n    }, \n    // istanbul ignore next\n    () => defaultValue);\n    const setState = useCallback((newValue) => {\n        const value = newValue instanceof Function ? newValue(storageValue.current.parsed) : newValue;\n        // reasons for `localStorage` to throw an error:\n        // - maximum quota is exceeded\n        // - under Mobile Safari (since iOS 5) when the user enters private mode\n        //   `localStorage.setItem()` will throw\n        // - trying to access `localStorage` object when cookies are disabled in Safari throws\n        //   \"SecurityError: The operation is insecure.\"\n        try {\n            localStorage.setItem(key, stringify(value));\n            inMemoryData.delete(key);\n        }\n        catch (_a) {\n            inMemoryData.set(key, value);\n        }\n        triggerCallbacks(key);\n    }, [key, stringify]);\n    // - syncs change across tabs, windows, iframes\n    // - the `storage` event is called only in all tabs, windows, iframe's except the one that\n    //   triggered the change\n    useEffect(() => {\n        if (!storageSync) {\n            return undefined;\n        }\n        const onStorage = (e) => {\n            if (e.storageArea === goodTry(() => localStorage) && e.key === key) {\n                triggerCallbacks(key);\n            }\n        };\n        window.addEventListener('storage', onStorage);\n        return () => window.removeEventListener('storage', onStorage);\n    }, [key, storageSync]);\n    return useMemo(() => [\n        value,\n        setState,\n        {\n            isPersistent: value === defaultValue || !inMemoryData.has(key),\n            removeItem() {\n                goodTry(() => localStorage.removeItem(key));\n                inMemoryData.delete(key);\n                triggerCallbacks(key);\n            },\n        },\n    ], [key, setState, value, defaultValue]);\n}\n// notifies all instances using the same `key` to update\nconst callbacks = new Set();\nfunction triggerCallbacks(key) {\n    for (const callback of [...callbacks]) {\n        callback(key);\n    }\n}\n// a wrapper for `JSON.parse()` that supports \"undefined\" value. otherwise,\n// `JSON.parse(JSON.stringify(undefined))` returns the string \"undefined\" not the value `undefined`\nfunction parseJSON(value) {\n    return value === 'undefined' ? undefined : JSON.parse(value);\n}\nfunction goodTry(tryFn) {\n    try {\n        return tryFn();\n    }\n    catch (_a) {\n        return undefined;\n    }\n}\n"],"mappings":"AAAA,SAASA,WAAW,EAAEC,SAAS,EAAEC,OAAO,EAAEC,MAAM,EAAEC,QAAQ,EAAEC,oBAAoB,QAAQ,OAAO;AAC/F;AACA,OAAO,MAAMC,YAAY,GAAG,IAAIC,GAAG,CAAC,CAAC;AACrC,eAAe,SAASC,oBAAoBA,CAACC,GAAG,EAAEC,OAAO,EAAE;EACvD;EACA,IAAIL,oBAAoB,KAAKM,SAAS,EAAE;IACpC,MAAM,IAAIC,SAAS,CAAE,yFAAwF,CAAC;EAClH;EACA,MAAM,CAACC,YAAY,CAAC,GAAGT,QAAQ,CAACM,OAAO,KAAK,IAAI,IAAIA,OAAO,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,OAAO,CAACG,YAAY,CAAC;EACvG;EACA;EACA;EACA;EACA,IAAI,OAAOC,MAAM,KAAK,WAAW,EAAE;IAC/B,OAAO,CACHD,YAAY,EACZ,MAAM,CAAE,CAAC,EACT;MACIE,YAAY,EAAE,IAAI;MAClBC,UAAU,EAAEA,CAAA,KAAM,CAAE;IACxB,CAAC,CACJ;EACL;EACA,MAAMC,UAAU,GAAGP,OAAO,KAAK,IAAI,IAAIA,OAAO,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,OAAO,CAACO,UAAU;EACvF;EACA;EACA;EACA,OAAOC,2BAA2B,CAACT,GAAG,EAAEI,YAAY,EAAEH,OAAO,KAAK,IAAI,IAAIA,OAAO,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,OAAO,CAACS,WAAW,EAAEF,UAAU,KAAK,IAAI,IAAIA,UAAU,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,UAAU,CAACG,KAAK,EAAEH,UAAU,KAAK,IAAI,IAAIA,UAAU,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,UAAU,CAACI,SAAS,CAAC;AACxR;AACA,SAASH,2BAA2BA,CAACT,GAAG,EAAEI,YAAY,EAAqE;EAAA,IAAnEM,WAAW,GAAAG,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAX,SAAA,GAAAW,SAAA,MAAG,IAAI;EAAA,IAAEF,KAAK,GAAAE,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAX,SAAA,GAAAW,SAAA,MAAGE,SAAS;EAAA,IAAEH,SAAS,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAX,SAAA,GAAAW,SAAA,MAAGG,IAAI,CAACJ,SAAS;EACrH;EACA;EACA;EACA;EACA;EACA,IAAI,CAACf,YAAY,CAACoB,GAAG,CAACjB,GAAG,CAAC,IACtBI,YAAY,KAAKF,SAAS,IAC1BgB,OAAO,CAAC,MAAMC,YAAY,CAACC,OAAO,CAACpB,GAAG,CAAC,CAAC,KAAK,IAAI,EAAE;IACnD;IACA;IACA;IACA;IACA;IACA;IACAkB,OAAO,CAAC,MAAMC,YAAY,CAACE,OAAO,CAACrB,GAAG,EAAEY,SAAS,CAACR,YAAY,CAAC,CAAC,CAAC;EACrE;EACA;EACA,MAAMkB,YAAY,GAAG5B,MAAM,CAAC;IACxB6B,IAAI,EAAE,IAAI;IACVC,MAAM,EAAEpB;EACZ,CAAC,CAAC;EACF,MAAMqB,KAAK,GAAG7B,oBAAoB,CAACL,WAAW,CAAEmC,aAAa,IAAK;IAC9D,MAAMC,QAAQ,GAAIC,QAAQ,IAAK;MAC3B,IAAI5B,GAAG,KAAK4B,QAAQ,EAAE;QAClBF,aAAa,CAAC,CAAC;MACnB;IACJ,CAAC;IACDG,SAAS,CAACC,GAAG,CAACH,QAAQ,CAAC;IACvB,OAAO,MAAM;MACTE,SAAS,CAACE,MAAM,CAACJ,QAAQ,CAAC;IAC9B,CAAC;EACL,CAAC,EAAE,CAAC3B,GAAG,CAAC,CAAC;EACT;EACA,MAAM;IACF,IAAIgC,EAAE;IACN,MAAMT,IAAI,GAAG,CAACS,EAAE,GAAGd,OAAO,CAAC,MAAMC,YAAY,CAACC,OAAO,CAACpB,GAAG,CAAC,CAAC,MAAM,IAAI,IAAIgC,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAG,IAAI;IAClG,IAAInC,YAAY,CAACoB,GAAG,CAACjB,GAAG,CAAC,EAAE;MACvBsB,YAAY,CAACW,OAAO,GAAG;QACnBV,IAAI;QACJC,MAAM,EAAE3B,YAAY,CAACqC,GAAG,CAAClC,GAAG;MAChC,CAAC;IACL,CAAC,MACI,IAAIuB,IAAI,KAAKD,YAAY,CAACW,OAAO,CAACV,IAAI,EAAE;MACzC,IAAIC,MAAM;MACV,IAAI;QACAA,MAAM,GAAGD,IAAI,KAAK,IAAI,GAAGnB,YAAY,GAAGO,KAAK,CAACY,IAAI,CAAC;MACvD,CAAC,CACD,OAAOY,EAAE,EAAE;QACPX,MAAM,GAAGpB,YAAY;MACzB;MACAkB,YAAY,CAACW,OAAO,GAAG;QACnBV,IAAI;QACJC;MACJ,CAAC;IACL;IACA,OAAOF,YAAY,CAACW,OAAO,CAACT,MAAM;EACtC,CAAC;EACD;EACA,MAAMpB,YAAY,CAAC;EACnB,MAAMgC,QAAQ,GAAG7C,WAAW,CAAE8C,QAAQ,IAAK;IACvC,MAAMZ,KAAK,GAAGY,QAAQ,YAAYC,QAAQ,GAAGD,QAAQ,CAACf,YAAY,CAACW,OAAO,CAACT,MAAM,CAAC,GAAGa,QAAQ;IAC7F;IACA;IACA;IACA;IACA;IACA;IACA,IAAI;MACAlB,YAAY,CAACE,OAAO,CAACrB,GAAG,EAAEY,SAAS,CAACa,KAAK,CAAC,CAAC;MAC3C5B,YAAY,CAACkC,MAAM,CAAC/B,GAAG,CAAC;IAC5B,CAAC,CACD,OAAOgC,EAAE,EAAE;MACPnC,YAAY,CAAC0C,GAAG,CAACvC,GAAG,EAAEyB,KAAK,CAAC;IAChC;IACAe,gBAAgB,CAACxC,GAAG,CAAC;EACzB,CAAC,EAAE,CAACA,GAAG,EAAEY,SAAS,CAAC,CAAC;EACpB;EACA;EACA;EACApB,SAAS,CAAC,MAAM;IACZ,IAAI,CAACkB,WAAW,EAAE;MACd,OAAOR,SAAS;IACpB;IACA,MAAMuC,SAAS,GAAIC,CAAC,IAAK;MACrB,IAAIA,CAAC,CAACC,WAAW,KAAKzB,OAAO,CAAC,MAAMC,YAAY,CAAC,IAAIuB,CAAC,CAAC1C,GAAG,KAAKA,GAAG,EAAE;QAChEwC,gBAAgB,CAACxC,GAAG,CAAC;MACzB;IACJ,CAAC;IACDK,MAAM,CAACuC,gBAAgB,CAAC,SAAS,EAAEH,SAAS,CAAC;IAC7C,OAAO,MAAMpC,MAAM,CAACwC,mBAAmB,CAAC,SAAS,EAAEJ,SAAS,CAAC;EACjE,CAAC,EAAE,CAACzC,GAAG,EAAEU,WAAW,CAAC,CAAC;EACtB,OAAOjB,OAAO,CAAC,MAAM,CACjBgC,KAAK,EACLW,QAAQ,EACR;IACI9B,YAAY,EAAEmB,KAAK,KAAKrB,YAAY,IAAI,CAACP,YAAY,CAACoB,GAAG,CAACjB,GAAG,CAAC;IAC9DO,UAAUA,CAAA,EAAG;MACTW,OAAO,CAAC,MAAMC,YAAY,CAACZ,UAAU,CAACP,GAAG,CAAC,CAAC;MAC3CH,YAAY,CAACkC,MAAM,CAAC/B,GAAG,CAAC;MACxBwC,gBAAgB,CAACxC,GAAG,CAAC;IACzB;EACJ,CAAC,CACJ,EAAE,CAACA,GAAG,EAAEoC,QAAQ,EAAEX,KAAK,EAAErB,YAAY,CAAC,CAAC;AAC5C;AACA;AACA,MAAMyB,SAAS,GAAG,IAAIiB,GAAG,CAAC,CAAC;AAC3B,SAASN,gBAAgBA,CAACxC,GAAG,EAAE;EAC3B,KAAK,MAAM+C,QAAQ,IAAI,CAAC,GAAGlB,SAAS,CAAC,EAAE;IACnCkB,QAAQ,CAAC/C,GAAG,CAAC;EACjB;AACJ;AACA;AACA;AACA,SAASe,SAASA,CAACU,KAAK,EAAE;EACtB,OAAOA,KAAK,KAAK,WAAW,GAAGvB,SAAS,GAAGc,IAAI,CAACL,KAAK,CAACc,KAAK,CAAC;AAChE;AACA,SAASP,OAAOA,CAAC8B,KAAK,EAAE;EACpB,IAAI;IACA,OAAOA,KAAK,CAAC,CAAC;EAClB,CAAC,CACD,OAAOhB,EAAE,EAAE;IACP,OAAO9B,SAAS;EACpB;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}